<?xml version="1.0" encoding="UTF-8"?>
<component-configuration
    xmlns="http://tis.co.jp/nablarch/component-configuration" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://tis.co.jp/nablarch/component-configuration">

  <config-file file="nablarch/common/mail/mail-batch.config" />
  <config-file file="nablarch/common/mail/mail-session.config" />

  <import file="db-default.xml" />

  <!-- メール関連テーブルスキーマ情報の定義ファイル -->
  <import file="nablarch/common/mail/MailTableSchema.xml" />
  <!-- 出力ライブラリ（メール送信）テストの共通定義ファイル -->
  <import file="nablarch/common/mail/MailTestCommon.xml" />
  <!-- スレッドコンテキストに保持される共通属性を管理するハンドラ -->
  <import file="nablarch/common/mail/handler/threadcontext.xml" />
  <!-- ２重起動防止ハンドラ -->
  <import file="nablarch/common/mail/handler/duplicateProcessCheck.xml" />
  <!-- 常駐化ハンドラ -->
  <import file="nablarch/common/mail/handler/processResident.xml" />
  <!-- 処理停止ハンドラ -->
  <import file="nablarch/common/mail/handler/residentProcessStop.xml" />
  <!-- データベース接続ハンドラ -->
  <import file="nablarch/common/mail/handler/db.xml" />

  <import file="nablarch/common/mail/message.xml" />

  <!-- リクエストID抽出の実装 -->
  <component name="requestIdExtractor" class="nablarch.common.util.ShortRequestIdExtractor" />

  <!--コミットログ実装 -->
  <component name="commitLogger" class="nablarch.core.log.app.BasicCommitLogger">
    <property name="interval" value="500" />
  </component>

  <!-- ステータス更新用のトランザクション -->
  <component name="statusUpdateTransaction" class="nablarch.core.db.transaction.SimpleDbTransactionManager">
    <property name="dbTransactionName" value="statusUpdateTransaction" />
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="transactionFactory" ref="jdbcTransactionFactory" />
  </component>

  <!-- ハンドラキュー構成 -->
    <list name="handlerQueue">
        <!-- ステータスコードを終了コードに変換するハンドラ -->
        <component class="nablarch.fw.handler.StatusCodeConvertHandler" />
        <!-- グローバルエラーハンドラ -->
        <component class="nablarch.fw.handler.GlobalErrorHandler" />
        <!-- エラー検証用の専用ハンドラ -->
        <component
            class="nablarch.common.mail.MailSenderTest$MailTestErrorHandler" />
        <!-- スレッドコンテキスト設定ハンドラ -->
        <component-ref name="threadContextHandler" />
        <!-- ２重起動防止ハンドラ -->
        <component-ref name="duplicateProcessCheckHandler" />

        <!-- リトライハンドラ -->
        <component name="retryHandler" class="nablarch.fw.handler.RetryHandler">
          <property name="retryLimitExceededFailureCode" value="" />
          <property name="retryContextFactory">
            <component class="nablarch.fw.handler.retry.CountingRetryContextFactory">
              <property name="retryCount" value="1" />          <!-- 1回リトライを行う -->
              <property name="retryIntervals" value="500" />   <!-- リトライを実行するまで0.5秒待機する -->
            </component>
          </property>
        </component>

        <!-- 常駐化ハンドラ （Retryテストなので常駐化する） -->
        <component-ref name="processResidentHandler" />
        <!--処理停止ハンドラ -->
        <component-ref name="processStopHandler" />
        <!-- データベース接続ハンドラ -->
        <component-ref name="dbConnectionManagementHandler" />
        <!--トランザクションマネージャ -->
        <component-ref name="transactionManagementHandler" />
        <!-- ディスパッチ -->
        <component class="nablarch.fw.handler.RequestPathJavaPackageMapping">
            <property name="basePackage" value="." />
            <property name="immediate" value="false" />
        </component>
        <!-- スレッド実行ハンドラ -->
        <component class="nablarch.fw.handler.MultiThreadExecutionHandler">
            <property name="concurrentNumber" value="${threadCount}" />
            <property name="commitLogger" ref="commitLogger" />
        </component>

        <!-- Transportをモック化するハンドラ -->
        <component class="nablarch.common.mail.MockTransportHandler" />
        <!-- MailRequestTableをモック化するハンドラ -->
        <component class="nablarch.common.mail.MockMailRequestTableHandler" />

        <!-- データベース接続ハンドラ -->
        <component-ref name="dbConnectionManagementHandler" />

        <!-- ループ・トランザクション制御ハンドラ -->
        <component class="nablarch.fw.handler.LoopHandler">
            <property name="commitInterval" value="${commitInterval}" />
            <property name="transactionFactory" ref="jdbcTransactionFactory" />
        </component>

        <!-- データリードハンドラ -->
        <component class="nablarch.fw.handler.DataReadHandler">
            <property name="maxCount" value="${maxCount}" />
        </component>
    </list>

    <component name="mailSessionConfig" class="nablarch.common.mail.MailSessionConfig">
      <property name="mailSmtpHost" value="${mail.smtp.host}" />
      <property name="mailHost" value="${mail.host}" />
      <property name="mailSmtpPort" value="${mail.smtp.port}" />
      <property name="mailSmtpConnectionTimeout" value="${mail.smtp.connectiontimeout}" />
      <property name="mailSmtpTimeout" value="${mail.smtp.timeout}" />
      <property name="option">
        <map>
          <entry key="mail.debug" value="true" />
        </map>
      </property>
    </component>

    <component name="initializer"
        class="nablarch.core.repository.initialization.BasicApplicationInitializer">
      <property name="initializeList">
        <list>
          <component-ref name="duplicateProcessChecker" />
          <component-ref name="processStopHandler" />
          <component-ref name="mailRequestTable" />
          <component-ref name="mailRecipientTable" />
          <component-ref name="mailAttachedFileTable" />
          <component-ref name="stringResourceCache" />
        </list>
      </property>
    </component>

    <!-- メールの送信日時をテストするため、SystemTimeUtil.getDateを固定化するSystemTimeProvider -->
    <component name="systemTimeProvider" class="nablarch.common.mail.MailSenderTest$TestSystemTimeProvider" />

    <!-- オブジェクトの情報のキャッシュ設定 -->
    <component name="statementValueObjectCache" class="nablarch.core.cache.BasicStaticDataCache">
      <property name="loader">
        <component
            class="nablarch.core.db.statement.autoproperty.FieldAndAnnotationLoader" />
      </property>
      <property name="loadOnStartup" value="false" />
    </component>

</component-configuration>
